[
  {
    "objectID": "Project1.html",
    "href": "Project1.html",
    "title": "ST558 Project 1",
    "section": "",
    "text": "Our goal for this project is to write functions that will manipulate and process data sets that come from the Public Use Microdata Sample (PUMS) Census API. This API gives pseudo person-level data. We’ll create generic functions to automatically summarize and plot certain returned data."
  },
  {
    "objectID": "Project1.html#customizable-function-to-query-the-api",
    "href": "Project1.html#customizable-function-to-query-the-api",
    "title": "ST558 Project 1",
    "section": "Customizable function to query the API",
    "text": "Customizable function to query the API\nThe function named query_census_api has the following arguments: year, numer_vars, cat_vars, geog, and geog_values. It also uses the functions get_tibble and format_num_and_cat_vars created earlier to return our data request into a nice usable format.\n\nyear: this argument represents the “Year of survey” with the year 2022 as the default year and the input values must be between 2010 and 2022.\nnumer_vars: this argument represents the numeric variables to be returned with ‘AGEP’ and ‘PWGTP’ as defaults. The variable ‘PWGTP’ will always be returned. This input parameter has the following options for the user: AGEP, GASP, GRPIP, JWAP (time), JWDP (time), and JWMNP.\ncat_vars: this argument represents the categorical variables to be returned with ‘SEX’ as the default value. This input parameter has the following options for the user: FER, HHL, HISPEED, JWTRNS, SCH, SCHL, and SEX.\ngeog: this argument represents the geography level to be returned with ‘State’ as the default value. This input parameter has the following options for the user: All, Region, Division, and State\n\n\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(numer_vars, as.numeric)`.\nCaused by warning:\n! Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(numer_vars)\n\n  # Now:\n  data %&gt;% select(all_of(numer_vars))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;.\n\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(cat_vars, as.factor)`.\nCaused by warning:\n! Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(cat_vars)\n\n  # Now:\n  data %&gt;% select(all_of(cat_vars))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;.\n\n\n# A tibble: 100 × 5\n    AGEP PWGTP HISPEED SCHL  state\n   &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;   &lt;chr&gt; &lt;chr&gt;\n 1    46    51 0       24    12   \n 2    67    79 0       24    12   \n 3    88   144 0       24    12   \n 4    72    11 0       24    12   \n 5    88    19 0       24    12   \n 6    72    14 0       24    12   \n 7    65    61 0       24    12   \n 8    39   496 0       24    12   \n 9    65    65 0       24    12   \n10    88     7 0       24    12   \n# ℹ 90 more rows\n\n\nTo allow the user to specify multiple years of survey data we wrote the R function query_with_years.\n\nquery_with_years &lt;- function(years=c(2022), ...){\n  \n  combined_tibble = tibble()\n  \n  for(i in seq_along(years)){\n    year_tibble &lt;- query_census_api(year=years[i], ...) |&gt;\n                      mutate(year=years[i])\n    \n    combined_tibble &lt;- bind_rows(combined_tibble, year_tibble)\n  }\n  \n  return(combined_tibble)\n}\n\ndata_tibble &lt;- query_with_years(numer_vars=c(\"JWAP\", \"GASP\"))\n\n[1] \"9H 7M 0S\"\n[1] \"9H 7M 0S\"\n[1] \"6H 12M 0S\"\n[1] \"6H 12M 0S\"\n[1] \"8H 12M 0S\"\n[1] \"8H 12M 0S\"\n[1] \"1H 52M 0S\"\n[1] \"1H 52M 0S\"\n[1] \"8H 12M 0S\"\n[1] \"8H 12M 0S\"\n[1] \"8H 57M 0S\"\n[1] \"8H 57M 0S\"\n[1] \"8H 47M 0S\"\n[1] \"8H 47M 0S\"\n[1] \"9H 7M 0S\"\n[1] \"9H 7M 0S\"\n[1] \"8H 7M 0S\"\n[1] \"8H 7M 0S\"\n[1] \"16H 2M 0S\"\n[1] \"16H 2M 0S\"\n[1] \"8H 17M 0S\"\n[1] \"8H 17M 0S\"\n[1] \"8H 47M 0S\"\n[1] \"8H 47M 0S\"\n[1] \"8H 2M 0S\"\n[1] \"8H 2M 0S\"\n[1] \"7H 2M 0S\"\n[1] \"7H 2M 0S\"\n[1] \"6H 17M 0S\"\n[1] \"6H 17M 0S\"\n[1] \"8H 32M 0S\"\n[1] \"8H 32M 0S\"\n[1] \"8H 12M 0S\"\n[1] \"8H 12M 0S\"\n[1] \"7H 27M 0S\"\n[1] \"7H 27M 0S\"\n[1] \"8H 2M 0S\"\n[1] \"8H 2M 0S\"\n[1] \"6H 32M 0S\"\n[1] \"6H 32M 0S\"\n[1] \"10H 7M 0S\"\n[1] \"10H 7M 0S\"\n[1] \"8H 7M 0S\"\n[1] \"8H 7M 0S\"\n[1] \"6H 22M 0S\"\n[1] \"6H 22M 0S\"\n[1] \"14H 32M 0S\"\n[1] \"14H 32M 0S\"\n[1] \"7H 12M 0S\"\n[1] \"7H 12M 0S\"\n[1] \"5H 57M 0S\"\n[1] \"5H 57M 0S\"\n[1] \"9H 42M 0S\"\n[1] \"9H 42M 0S\"\n[1] \"6H 22M 0S\"\n[1] \"6H 22M 0S\"\n[1] \"8H 12M 0S\"\n[1] \"8H 12M 0S\"\n[1] \"7H 12M 0S\"\n[1] \"7H 12M 0S\"\n[1] \"6H 47M 0S\"\n[1] \"6H 47M 0S\"\n[1] \"8H 42M 0S\"\n[1] \"8H 42M 0S\"\n[1] \"9H 12M 0S\"\n[1] \"9H 12M 0S\"\n[1] \"7H 27M 0S\"\n[1] \"7H 27M 0S\"\n[1] \"12H 42M 0S\"\n[1] \"12H 42M 0S\"\n\n#Testing our function\ndata_tibble &lt;- query_with_years(numer_vars=c(\"GASP\"))\ndata_tibble\n\n# A tibble: 100 × 6\n    GASP PWGTP SEX   SCHL  state  year\n   &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n 1     3   170 1     24    12     2022\n 2     3   105 2     24    12     2022\n 3    40   125 1     24    12     2022\n 4     3   174 1     24    12     2022\n 5     3    54 2     24    12     2022\n 6     3    43 2     24    12     2022\n 7     3    63 2     24    12     2022\n 8   610    27 2     24    12     2022\n 9    40    12 1     24    12     2022\n10     3    64 1     24    12     2022\n# ℹ 90 more rows"
  },
  {
    "objectID": "Project1.html#writing-a-generic-function-for-summarizing",
    "href": "Project1.html#writing-a-generic-function-for-summarizing",
    "title": "ST558 Project 1",
    "section": "Writing a Generic Function for Summarizing",
    "text": "Writing a Generic Function for Summarizing\nNow that we have our data, lets try to do something with it. We created a function named summary.census that takes in three arguments: the tibble data set, the numeric variables (the default will summarize all the numeric variables other than PWGTP) and any categorical variables that that you want to summarize.\n\nsummary.census &lt;- function(data_tibble,numer_vars=\"All\",cat_vars=\"All\"){\n\n  class(data_tibble) &lt;- c(\"census\",class(data_tibble))\n  summary_tibble = tibble()\n\n  if (numer_vars != \"All\" | cat_vars != \"All\") {    \n    for(i in seq_along(numer_vars)){\n      numer_col &lt;- data_tibble[[numer_vars[i]]]\n      weight_col &lt;- data_tibble$PWGTP\n      var_col&lt;-paste(numer_vars[i])\n      \n      #Find mean and sd of numeric variables\n      #mean\n      sample_mean&lt;-sum(numer_col*weight_col)/sum(weight_col)\n      #sd\n      sample_sd&lt;-sqrt(sum(numer_col**2*weight_col)/sum(weight_col)-sample_mean**2)\n  \n      summary_tibble &lt;- bind_rows(summary_tibble,tibble(variable=var_col,mean=sample_mean,sd=sample_sd))    \n    }\n  } else {\n    for(i in seq_along(names(data_tibble))){\n      if (names(data_tibble)[i] != \"PWGTP\") {\n        if (!is.numeric(data_tibble[[i]])) {\n          numer_col &lt;- as.numeric(data_tibble[[i]])\n        }\n        else {\n          numer_col &lt;- data_tibble[[i]] \n        }\n        weight_col &lt;- data_tibble$PWGTP\n        var_col&lt;-names(data_tibble)[i]\n        \n        #Find mean and sd of numeric variables\n        #mean\n        sample_mean&lt;-sum(numer_col*weight_col)/sum(weight_col)\n        #sd\n        sample_sd&lt;-sqrt(sum(numer_col**2*weight_col)/sum(weight_col)-sample_mean**2)\n        \n        summary_tibble &lt;- bind_rows(summary_tibble,tibble(variable=var_col,mean=sample_mean,sd=sample_sd))    \n      }\n    }\n  }\n  return(summary_tibble)\n\n}\n#test function \n#summary_test&lt;-summary.census(data_tibble_test,numer_vars=c(\"AGEP\"),cat_vars=c(\"FER\",\"SEX\",\"HISPEED\"))\nsummary_test&lt;-summary.census(data_tibble_test)\n\nFinally, we created a basic graph function that takes in three arguments: the tibble data set, a numeric variables (the default variable is AGEP) and a categorical variable that you want to summarize (the default variable is SEX).\n\ngraph.census &lt;- function(data_tibble,num_var=\"AGEP\",cat_var=\"SEX\"){\n\n  #creating a basic boxplot\n  graph &lt;- ggplot(data_tibble,\n  aes(x = get(cat_var), y = get(num_var), weight = PWGTP)) +\n  geom_boxplot()\n  return(graph)\n\n}\n#graph.census(data_tibble_test)"
  },
  {
    "objectID": "Project1.html#end-example",
    "href": "Project1.html#end-example",
    "title": "ST558 Project 1",
    "section": "End example",
    "text": "End example\nThis will be filled in later."
  }
]