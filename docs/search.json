[
  {
    "objectID": "Project1.html",
    "href": "Project1.html",
    "title": "ST558 Project 1",
    "section": "",
    "text": "Our goal for this project is to write functions that will manipulate and process data sets that come from the Public Use Microdata Sample (PUMS) Census API. This API gives pseudo person-level data. We’ll create generic functions to automatically summarize and plot the returned data."
  },
  {
    "objectID": "Project1.html#customizable-function-to-query-the-api",
    "href": "Project1.html#customizable-function-to-query-the-api",
    "title": "ST558 Project 1",
    "section": "Customizable function to query the API",
    "text": "Customizable function to query the API\nThe function named query_census_api has the following arguments: year, numer_vars, cat_vars, geog, and geog_values. It also uses the functions get_tibble and format_num_and_cat_vars created earlier to return our data request into a nice usable format.\n\nyear: this argument represents the “Year of survey” with the year 2022 as the default year and the input values must be between 2010 and 2022, except there is no data for the year 2020.\nnumer_vars: this argument represents the numeric variables to be returned with ‘AGEP’ and ‘PWGTP’ as defaults. The variable ‘PWGTP’ will always be returned. This input parameter has the following options for the user: AGEP, GASP, GRPIP, JWAP (time), JWDP (time), and JWMNP.\ncat_vars: this argument represents the categorical variables to be returned with ‘SEX’ as the default value. This input parameter has the following options for the user: FER, HHL, HISPEED, JWTRNS, SCH, SCHL, and SEX.\ngeog: this argument represents the geography level to be returned with ‘State’ as the default value. This input parameter has the following options for the user: All, Region, Division, and State\ngeog_values: this argument represents the value by which to subset the region. The default is ‘12’, which is the value for Florida, the state our group was assigned.\n\n\nquery_census_api &lt;- function(year=2022, numer_vars=c(\"AGEP\"), cat_vars=c(\"SEX\"), geog=\"State\", geog_values=c('12')){\n  \n  ######################INPUT VALIDATION######################\n  #year validation\n  if ((!year %in% c(2010:2019, 2021:2022))){\n    stop(\"Year must be between 2010 and 2022, excluding 2020.\")\n  }\n  \n  #numer_vars validation\n  numer_vars &lt;- union(numer_vars, \"PWGTP\")\n  \n  if(length(numer_vars) &lt; 2) {\n    stop(\"Not enough numerical variables specified. Options are AGEP, GASP, GRPIP, JWAP, JWDP, JWMNP, and PWGTP\")\n  } else if(length(union(all_numer_vars, numer_vars)) &gt; length(all_numer_vars)){\n    stop(\"numer_vars includes variables which are not in the allowed set, which is AGEP, GASP, GRPIP, JWAP, JWDP, JWMNP, and PWGTP\")\n  }\n  \n  #cat_vars validation\n  if(length(cat_vars) &lt; 1) {\n    stop(\"Not enough categorical variables specified. Options are FER, HHL, HISPEED, JWTRNS, SCH, SCHL, and SEX\")\n  } else if(length(union(all_cat_vars, cat_vars)) &gt; length(all_cat_vars)){\n    stop(\"cat_vars includes variables which are not in the allowed set, which is FER, HHL, HISPEED, JWTRNS, SCH, SCHL, and SEX\")\n  }\n  \n  #geog validation\n  if (!(geog %in% all_geog)){\n    stop(\"invalid value for geog. Options are All, Region, Division, and State\")\n  }\n  ######################INPUT VALIDATION######################\n\n  #now to build the query URL\n  vars_query &lt;- paste0(c(numer_vars, cat_vars), collapse=\",\")\n  \n  geog_query &lt;- character()\n  \n  if(geog != \"All\"){\n    if (length(geog_values) == 0) {\n      geog_query &lt;- paste0(\"&for=\", tolower(geog), \":*\")\n    } else {\n      geog_query &lt;- paste0(\"&for=\", tolower(geog), \":\", paste0(geog_values, collapse=\",\"))\n    }\n  } \n  \n  URL_census &lt;- paste0(\"https://api.census.gov/data/\", \n                      year, \n                      \"/acs/acs1/pums?\",\n                      \"get=\",\n                      vars_query,\n                      geog_query,\n                      key_query)\n  \n  # fetch the data using the new URL, get the data in a tibble, and clean the data using the format function\n  data_info &lt;- httr::GET(URL_census)\n  data = get_tibble(data_info)\n  clean_data = format_num_and_cat_vars(data, numer_vars, cat_vars)\n  return(clean_data)\n}\n\n#Testing our function\ndata_tibble_test &lt;- query_census_api(year=2018, numer_vars=c(\"AGEP\"), cat_vars=c(\"HISPEED\"))\nhead(data_tibble_test)\n\n# A tibble: 6 × 4\n    Age PUMS_Weight State Highspeed_Internet\n  &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt; &lt;fct&gt;             \n1    15          26 12    N/A               \n2    72          24 12    N/A               \n3    37          31 12    N/A               \n4    21          76 12    N/A               \n5    18          72 12    N/A               \n6    38          62 12    N/A               \n\n\nTo allow the user to specify multiple years of survey data, we wrote the R function query_with_years.\n\nquery_with_years &lt;- function(years=c(2022), ...){\n  \n  # initialize an empty tibble\n  combined_tibble = tibble()\n  \n  # loop through the years and add on each year's data\n  for(i in seq_along(years)){\n    year_tibble &lt;- query_census_api(year=years[i], ...) |&gt;\n                      mutate(Year=years[i])\n    \n    combined_tibble &lt;- bind_rows(combined_tibble, year_tibble)\n  }\n  \n  # add 'census' class to tibble\n  class(combined_tibble) &lt;- c(\"census\", class(combined_tibble))\n  \n  return(combined_tibble)\n}\n\n#Testing our function\ndata_tibble &lt;- query_with_years(years=c(2019), numer_vars=c(\"AGEP\", \"GASP\"), cat_vars=c(\"FER\", \"HHL\", \"SEX\"))\nhead(data_tibble)\n\n# A tibble: 6 × 8\n    Age Gas_Bill_Monthly PUMS_Weight State Recent_Birth Sex    Language  Year\n  &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt; &lt;fct&gt;        &lt;fct&gt;  &lt;fct&gt;    &lt;dbl&gt;\n1    33                3          32 12    N/A          Male   N/A       2019\n2    19                3          45 12    No           Female N/A       2019\n3    38                3          70 12    N/A          Male   N/A       2019\n4    60                3          17 12    N/A          Male   N/A       2019\n5    18                3         134 12    N/A          Male   N/A       2019\n6    29                3          11 12    N/A          Male   N/A       2019"
  },
  {
    "objectID": "Project1.html#writing-a-generic-function-for-summarizing",
    "href": "Project1.html#writing-a-generic-function-for-summarizing",
    "title": "ST558 Project 1",
    "section": "Writing a Generic Function for Summarizing",
    "text": "Writing a Generic Function for Summarizing\nNow that we have our data, let’s try to do something with it. We created a summary() function for the census class that takes in three arguments: the tibble data set, numeric variables to summarize, and categorical variables to summarize. If no numeric variables are specified, all will be summarized; similar for categorical variables.\n\nsummary.census &lt;- function(data_tibble, numer_vars=c(\"All\"), cat_vars=c(\"All\")){\n\n  #if user doesn't specify numerical variables to summarize\n  if(\"All\" %in% numer_vars) {\n    \n    numer_vars &lt;- c()\n\n    for(i in seq_along(names(data_tibble))){\n      if (is.numeric(data_tibble[[i]]) & names(data_tibble)[i] != \"PUMS_Weight\") {\n          numer_vars &lt;- c(numer_vars, names(data_tibble)[i])\n      }\n    }\n  }\n  \n  #if user doesn't specify categorical variables to summarize\n  if(\"All\" %in% cat_vars){\n    \n    cat_vars &lt;- c()\n    \n    for(i in seq_along(names(data_tibble))){\n      if (!is.numeric(data_tibble[[i]])) {\n          cat_vars &lt;- c(cat_vars, names(data_tibble)[i])\n      }\n    }\n  }\n\n  # start a blank tibble for the numerical variable summary\n  numer_summary = tibble()\n  \n  # grab the weight data for numerical calculations\n  weight_col &lt;- data_tibble$PUMS_Weight\n  \n  # numerical var calculations\n  for (numer_var in numer_vars){\n    \n    #Find mean and sd of numeric variables\n    sample_mean &lt;- sum(data_tibble[, numer_var]*weight_col)/sum(weight_col)\n    sample_sd &lt;- sqrt(sum(data_tibble[, numer_var]**2*weight_col)/sum(weight_col)-sample_mean**2)\n\n    # add line to summary tibble\n    numer_summary &lt;- bind_rows(numer_summary, tibble(variable=numer_var, mean=sample_mean, sd=sample_sd))\n    \n  }\n\n  # start a blank list for the categorical variable summary\n  cat_summary = list()\n  \n  # get counts for each cat var\n  for (cat_var in cat_vars){\n    \n    var_count &lt;- data_tibble |&gt;\n      count(data_tibble[!!cat_var]) |&gt;\n      rename(count=n)\n    \n    # add tibble to summary list\n    cat_summary &lt;- c(cat_summary, list(var_count))\n  }\n  \n  # label the categorical variable count summaries\n  names(cat_summary) &lt;- cat_vars\n  \n  # return all summaries\n  return(list(numerical=numer_summary, categorical=cat_summary))\n}\n\n#test function \n# summary_test&lt;-summary.census(data_tibble,numer_vars=c(\"Age\"),cat_vars=c(\"Sex\"))\nsummary_test&lt;-summary(data_tibble)\n\nsummary_test$numerical\n\n# A tibble: 3 × 3\n  variable            mean    sd\n  &lt;chr&gt;              &lt;dbl&gt; &lt;dbl&gt;\n1 Age                42.0   23.9\n2 Gas_Bill_Monthly    9.56  27.5\n3 Year             2019      0  \n\nsummary_test$categorical\n\n$State\n# A tibble: 1 × 2\n  State  count\n  &lt;chr&gt;  &lt;int&gt;\n1 12    205294\n\n$Recent_Birth\n# A tibble: 3 × 2\n  Recent_Birth  count\n  &lt;fct&gt;         &lt;int&gt;\n1 N/A          165399\n2 No            38118\n3 Yes            1777\n\n$Sex\n# A tibble: 2 × 2\n  Sex     count\n  &lt;fct&gt;   &lt;int&gt;\n1 Female 105795\n2 Male    99499\n\n$Language\n# A tibble: 6 × 2\n  Language                            count\n  &lt;fct&gt;                               &lt;int&gt;\n1 Asian and Pacific Island languages   4212\n2 English Only                       134584\n3 N/A                                  8202\n4 Other Indo-European languages       12678\n5 Other Language                       1786\n6 Spanish                             43832"
  },
  {
    "objectID": "Project1.html#end-example-conclusion",
    "href": "Project1.html#end-example-conclusion",
    "title": "ST558 Project 1",
    "section": "End example (Conclusion)",
    "text": "End example (Conclusion)\nWe have created several functions (get_tibble,format_num_and_cat_vars,query_census_api,query_with_years,summary, and plot) that will manipulate and process data sets that come from the Public Use Microdata Sample (PUMS) Census API. Let’s show a couple of simple examples of using them.\nIn the first example, we show how to use the summary and plot functions to make interesting comparisons of rent for each sex, and highspeed internet by rent.\nThe variables we use are:\n\n“AGEP”/“Age”=Age\n“GRPIP”/“Rent_Percent_of_Income”=Gross rent as a percentage of household income past 12 months\n“HISPEED”/“Highspeed_Internet”=Broadband (high speed) Internet service such as cable, fiber optic, or DSL service\n“SEX”/“Sex”=sex of respondant\ngeog=“State”\ngeog_values=“12”(“Florida/FL”)\n\n\n#Using query_with_years to fetch data \ndata_tibble_test &lt;- query_with_years(years=c(2018), numer_vars=c(\"AGEP\",\"GRPIP\"), cat_vars=c(\"SEX\",\"HISPEED\"), geog=\"State\", geog_values=c('12'))\n\n#summary stats on selected variables\nsummary_test_selected&lt;-summary(data_tibble_test, cat_vars=c(\"Sex\", \"Highspeed_Internet\"), numer_vars=c(\"Age\", \"Rent_Percent_of_Income\"))\nsummary_test_selected\n\n$numerical\n# A tibble: 2 × 3\n  variable                mean    sd\n  &lt;chr&gt;                  &lt;dbl&gt; &lt;dbl&gt;\n1 Age                     41.7  23.9\n2 Rent_Percent_of_Income  12.5  23.4\n\n$categorical\n$categorical$Sex\n# A tibble: 2 × 2\n  Sex     count\n  &lt;fct&gt;   &lt;int&gt;\n1 Female 103907\n2 Male    98253\n\n$categorical$Highspeed_Internet\n# A tibble: 3 × 2\n  Highspeed_Internet  count\n  &lt;fct&gt;               &lt;int&gt;\n1 N/A                 27164\n2 No                  25085\n3 Yes                149911\n\n#box plot for Rent_Percent_of_Income and Sex variables\nplot(data_tibble_test, numer_var=\"Rent_Percent_of_Income\", cat_var=\"Highspeed_Internet\")\n\n\n\n\n\n\n\n#box plot for Rent_Percent_of_Income and Sex variables\nplot(data_tibble_test, numer_var=\"Rent_Percent_of_Income\", cat_var=\"Sex\")\n\n\n\n\n\n\n\n\nFrom the boxplots above, it seems that females had a bit higher rent as a percent of their income than males, and that those with lower rent as a percent of their income were more likely to have highspeed internet compared to those with higher rent.\nThe second example, I am going to use the query_with_years function to look at the same variables as above, but for Alaska, which is “ST=2”. You can find the different “ST” codes here.\n\n#Using query_with_years to fetch data \ndata_tibble_test &lt;- query_with_years(years=c(2018), numer_vars=c(\"AGEP\",\"GRPIP\"), cat_vars=c(\"SEX\",\"HISPEED\"), geog=\"State\", geog_values=c('2'))\n\n#summary stats on selected variables\nsummary_test_selected&lt;-summary(data_tibble_test, cat_vars=c(\"Sex\", \"Highspeed_Internet\"), numer_vars=c(\"Age\", \"Rent_Percent_of_Income\"))\nsummary_test_selected\n\n$numerical\n# A tibble: 2 × 3\n  variable                mean    sd\n  &lt;chr&gt;                  &lt;dbl&gt; &lt;dbl&gt;\n1 Age                    36.1   22.0\n2 Rent_Percent_of_Income  9.22  19.7\n\n$categorical\n$categorical$Sex\n# A tibble: 2 × 2\n  Sex    count\n  &lt;fct&gt;  &lt;int&gt;\n1 Female  3204\n2 Male    3507\n\n$categorical$Highspeed_Internet\n# A tibble: 3 × 2\n  Highspeed_Internet count\n  &lt;fct&gt;              &lt;int&gt;\n1 N/A                 1540\n2 No                  1380\n3 Yes                 3791\n\n#box plot for Rent_Percent_of_Income and Sex variables\nplot(data_tibble_test, numer_var=\"Rent_Percent_of_Income\", cat_var=\"Highspeed_Internet\")\n\n\n\n\n\n\n\n#box plot for Rent_Percent_of_Income and Sex variables\nplot(data_tibble_test, numer_var=\"Rent_Percent_of_Income\", cat_var=\"Sex\")\n\n\n\n\n\n\n\n\nThis second example shows similar patterns in the data, but more drastic than the Florida example."
  }
]