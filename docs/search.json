[
  {
    "objectID": "Project1.html",
    "href": "Project1.html",
    "title": "Project1",
    "section": "",
    "text": "# Load libraries\nlibrary(jsonlite)\nlibrary(tidyverse)"
  },
  {
    "objectID": "Project1.html#customizable-function-to-query-the-api",
    "href": "Project1.html#customizable-function-to-query-the-api",
    "title": "Project1",
    "section": "Customizable function to query the API",
    "text": "Customizable function to query the API\nThe function named query_census_api has the following inputs: year, numer_vars, cat_vars, geog, and geog_values. It also uses the functions get_tibble and format_num_and_cat_vars created earlier to return our data request into a nice usable format.\n\nyear: this input parameter represents the “Year of survey” with the year 2022 as the default year and the input values must be between 2010 and 2022.\nnumer_vars: this input parameter represents the numeric variables to be returned with ‘AGEP’ and ‘PWGTP’ as defaults. The variable ‘PWGTP’ will always be returned. This input parameter has the following options for the user: AGEP, GASP, GRPIP, JWAP (time), JWDP (time), and JWMNP.\ncat_vars: this input parameter represents the categorical variables to be returned with ‘SEX’ as the default value. This input parameter has the following options for the user: FER, HHL, HISPEED, JWTRNS, SCH, SCHL, and SEX.\ngeog: this input parameter represents the geography level to be returned with ‘State’ as the default value. This input parameter has the following options for the user: All, Region, Division, and State\n\n\nquery_census_api &lt;- function(year=2022, numer_vars=c(\"AGEP\"), cat_vars=c(\"SEX\"), geog=\"State\", geog_values=c('12')){\n  \n  ######################INPUT VALIDATION######################\n  #year\n  if ((!year %in% 2010:2022)){\n    stop(\"Year must be between 2010 and 2022.\")\n  }\n  \n  #numer_vars\n  numer_vars &lt;- union(numer_vars, \"PWGTP\")\n  \n  if(length(numer_vars) &lt; 2) {\n    stop(\"Not enough numerical variables specified. Options are AGEP, GASP, GRPIP, JWAP, JWDP, JWMNP, and PWGTP\")\n  } else if(length(union(all_numer_vars, numer_vars)) &gt; length(all_numer_vars)){\n    stop(\"numer_vars includes variables which are not in the allowed set, which is AGEP, GASP, GRPIP, JWAP, JWDP, JWMNP, and PWGTP\")\n  }\n  \n  #cat_vars\n  if(length(cat_vars) &lt; 1) {\n    stop(\"Not enough categorical variables specified. Options are FER, HHL, HISPEED, JWTRNS, SCH, SCHL, and SEX\")\n  } else if(length(union(all_cat_vars, cat_vars)) &gt; length(all_cat_vars)){\n    stop(\"cat_vars includes variables which are not in the allowed set, which is FER, HHL, HISPEED, JWTRNS, SCH, SCHL, and SEX\")\n  }\n  \n  #geog\n  if (!(geog %in% all_geog)){\n    stop(\"invalid value for geog. Options are All, Region, Division, and State\")\n  }\n  ######################INPUT VALIDATION######################\n\n  #now to build the query URL\n  vars_query &lt;- paste0(c(numer_vars, cat_vars), collapse=\",\")\n  \n  geog_query &lt;- character()\n  \n  if(geog != \"All\"){\n    if (length(geog_values) == 0) {\n      geog_query &lt;- paste0(\"&for=\", tolower(geog), \":*\")\n    } else {\n      geog_query &lt;- paste0(\"&for=\", tolower(geog), \":\", paste0(geog_values, collapse=\",\"))\n    }\n  } \n  \n  URL_census &lt;- paste0(\"https://api.census.gov/data/\", \n                      year, \n                      \"/acs/acs1/pums?\",\n                      \"get=\",\n                      vars_query,\n                      geog_query,\n                      \"&SCHL=24\",\n                      key_query)\n  \n  data_info &lt;- httr::GET(URL_census)\n  data = get_tibble(data_info)\n  clean_data = format_num_and_cat_vars(data, numer_vars, cat_vars)\n  \n  #return(data)\n}\n\n#data_tibble_test &lt;- query_census_api(year=2021, numer_vars=c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\", \"PWGTP\"))\n#data_tibble_test &lt;- query_census_api(year=2021, numer_vars=c(\"AGEP\"), cat_vars=c(\"HISPEED\"), geog=\"State\", geog_values=c(\"06\", \"24\"))\ndata_tibble_test &lt;- query_census_api(year=2021, numer_vars=c(\"AGEP\"), cat_vars=c(\"HISPEED\"), geog=\"State\")\n#data_tibble_test &lt;- query_census_api(year=2021, numer_vars=c(\"AGEP\"), cat_vars=c(\"HISPEED\"))\n\ndata_tibble_test\n\n# A tibble: 2,532 × 5\n   AGEP  PWGTP HISPEED SCHL  state\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;\n 1 46    51    0       24    12   \n 2 67    79    0       24    12   \n 3 88    144   0       24    12   \n 4 72    11    0       24    12   \n 5 88    19    0       24    12   \n 6 72    14    0       24    12   \n 7 65    61    0       24    12   \n 8 39    496   0       24    12   \n 9 65    65    0       24    12   \n10 88    7     0       24    12   \n# ℹ 2,522 more rows\n\n\nTo allow the user to specify multiple years of survey data we wrote the R function query_with_years.\n\nquery_with_years &lt;- function(years=c(2022), ...){\n  \n  combined_tibble = tibble()\n  \n  for(i in seq_along(years)){\n    year_tibble &lt;- query_census_api(year=years[i], ...) |&gt;\n                      mutate(year=years[i])\n    \n    combined_tibble &lt;- bind_rows(combined_tibble, year_tibble)\n  }\n  \n  return(combined_tibble)\n}\n\ndata_tibble &lt;- query_with_years(numer_vars=c(\"JWAP\"))\n\ndata_tibble\n\n# A tibble: 2,731 × 6\n   JWAP  PWGTP SEX   SCHL  state  year\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n 1 0     138   2     24    12     2022\n 2 0     42    1     24    12     2022\n 3 0     27    1     24    12     2022\n 4 0     142   1     24    12     2022\n 5 0     48    1     24    12     2022\n 6 0     12    1     24    12     2022\n 7 0     72    2     24    12     2022\n 8 0     43    1     24    12     2022\n 9 0     11    1     24    12     2022\n10 0     35    1     24    12     2022\n# ℹ 2,721 more rows"
  }
]