[
  {
    "objectID": "Project1.html",
    "href": "Project1.html",
    "title": "ST558 Project 1",
    "section": "",
    "text": "Our goal for this project is to write functions that will manipulate and process data sets that come from the Public Use Microdata Sample (PUMS) Census API. This API gives pseudo person-level data. We’ll create generic functions to automatically summarize and plot certain returned data."
  },
  {
    "objectID": "Project1.html#customizable-function-to-query-the-api",
    "href": "Project1.html#customizable-function-to-query-the-api",
    "title": "ST558 Project 1",
    "section": "Customizable function to query the API",
    "text": "Customizable function to query the API\nThe function named query_census_api has the following arguments: year, numer_vars, cat_vars, geog, and geog_values. It also uses the functions get_tibble and format_num_and_cat_vars created earlier to return our data request into a nice usable format.\n\nyear: this argument represents the “Year of survey” with the year 2022 as the default year and the input values must be between 2010 and 2022.\nnumer_vars: this argument represents the numeric variables to be returned with ‘AGEP’ and ‘PWGTP’ as defaults. The variable ‘PWGTP’ will always be returned. This input parameter has the following options for the user: AGEP, GASP, GRPIP, JWAP (time), JWDP (time), and JWMNP.\ncat_vars: this argument represents the categorical variables to be returned with ‘SEX’ as the default value. This input parameter has the following options for the user: FER, HHL, HISPEED, JWTRNS, SCH, SCHL, and SEX.\ngeog: this argument represents the geography level to be returned with ‘State’ as the default value. This input parameter has the following options for the user: All, Region, Division, and State\n\n\nquery_census_api &lt;- function(year=2022, numer_vars=c(\"AGEP\"), cat_vars=c(\"SEX\"), geog=\"State\", geog_values=c('12')){\n  \n  ######################INPUT VALIDATION######################\n  #year\n  if ((!year %in% 2010:2022)){\n    stop(\"Year must be between 2010 and 2022.\")\n  }\n  \n  #numer_vars\n  numer_vars &lt;- union(numer_vars, \"PWGTP\")\n  \n  if(length(numer_vars) &lt; 2) {\n    stop(\"Not enough numerical variables specified. Options are AGEP, GASP, GRPIP, JWAP, JWDP, JWMNP, and PWGTP\")\n  } else if(length(union(all_numer_vars, numer_vars)) &gt; length(all_numer_vars)){\n    stop(\"numer_vars includes variables which are not in the allowed set, which is AGEP, GASP, GRPIP, JWAP, JWDP, JWMNP, and PWGTP\")\n  }\n  \n  #cat_vars\n  if(length(cat_vars) &lt; 1) {\n    stop(\"Not enough categorical variables specified. Options are FER, HHL, HISPEED, JWTRNS, SCH, SCHL, and SEX\")\n  } else if(length(union(all_cat_vars, cat_vars)) &gt; length(all_cat_vars)){\n    stop(\"cat_vars includes variables which are not in the allowed set, which is FER, HHL, HISPEED, JWTRNS, SCH, SCHL, and SEX\")\n  }\n  \n  #geog\n  if (!(geog %in% all_geog)){\n    stop(\"invalid value for geog. Options are All, Region, Division, and State\")\n  }\n  ######################INPUT VALIDATION######################\n\n  #now to build the query URL\n  vars_query &lt;- paste0(c(numer_vars, cat_vars), collapse=\",\")\n  \n  geog_query &lt;- character()\n  \n  if(geog != \"All\"){\n    if (length(geog_values) == 0) {\n      geog_query &lt;- paste0(\"&for=\", tolower(geog), \":*\")\n    } else {\n      geog_query &lt;- paste0(\"&for=\", tolower(geog), \":\", paste0(geog_values, collapse=\",\"))\n    }\n  } \n  \n  URL_census &lt;- paste0(\"https://api.census.gov/data/\", \n                      year, \n                      \"/acs/acs1/pums?\",\n                      \"get=\",\n                      vars_query,\n                      geog_query,\n                      \"&SCHL=24\",\n                      key_query)\n  \n  data_info &lt;- httr::GET(URL_census)\n  data = get_tibble(data_info)\n  clean_data = format_num_and_cat_vars(data, numer_vars, cat_vars)\n  class(clean_data) &lt;- c(\"census\",class(clean_data))\n  #return(data)\n}\n\n#data_tibble_test &lt;- query_census_api(year=2021, numer_vars=c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\", \"PWGTP\"))\n#data_tibble_test &lt;- query_census_api(year=2021, numer_vars=c(\"AGEP\"), cat_vars=c(\"HISPEED\"), geog=\"State\", geog_values=c(\"06\", \"24\"))\n#data_tibble_test &lt;- query_census_api(year=2021, numer_vars=c(\"AGEP\"), cat_vars=c(\"HISPEED\"), geog=\"State\")\n#data_tibble_test &lt;- query_census_api(year=2021, numer_vars=c(\"AGEP\"), cat_vars=c(\"HISPEED\"))\n#data_tibble_test\n\nTo allow the user to specify multiple years of survey data we wrote the R function query_with_years.\n\nquery_with_years &lt;- function(years=c(2022), ...){\n  \n  combined_tibble = tibble()\n  \n  for(i in seq_along(years)){\n    year_tibble &lt;- query_census_api(year=years[i], ...) |&gt;\n                      mutate(year=years[i])\n    \n    combined_tibble &lt;- bind_rows(combined_tibble, year_tibble)\n  }\n  \n  return(combined_tibble)\n}\n\n#data_tibble &lt;- query_with_years(numer_vars=c(\"JWAP\"))\n#data_tibble"
  },
  {
    "objectID": "Project1.html#writing-a-generic-function-for-summarizing",
    "href": "Project1.html#writing-a-generic-function-for-summarizing",
    "title": "ST558 Project 1",
    "section": "Writing a Generic Function for Summarizing",
    "text": "Writing a Generic Function for Summarizing\nNow that we have our data, lets try to do something with it. We created a function named summary.census that takes in three arguments: the tibble data set, the numeric variables (the default is all the numeric variables other than PWGTP) and any categorical variables that that you want to summarize.\n\nsummary.census &lt;- function(data_tibble,numer_vars,cat_vars){\n\n  #Find mean and sd of numeric variables\n  #mean\n  #sum(numeric_vector*weight_vector)/sum(weight_vector)\n  #sd\n  #sqrt(sum(numeric_vectorˆ2*weight_vector)/sum(weight_vector)-sample_meanˆ2)\n  #summary(_your_census_tibble_)\n  \n  #creating a basic boxplot\n  #ggplot(_your_census_tibble_or_modification_,\n  #aes(x = get(cat_var), y = get(num_var), weight = PWGTP)) +\n  #geom_boxplot()\n}"
  },
  {
    "objectID": "Project1.html#end-example",
    "href": "Project1.html#end-example",
    "title": "ST558 Project 1",
    "section": "End example",
    "text": "End example\nThis will be filled in later."
  }
]