---
title: "ST558 Project 1"
format: html
editor: visual
API key: ef57316550be8b6492df7ca01b32a193c83ed8fc
---

```{r}
#| message: FALSE
#| echo: FALSE

# Load libraries
library(jsonlite)
library(tidyverse)
library(ggplot2)
```

# Introduction

Our goal for this project is to write functions that will manipulate and process data sets that come from the Public Use Microdata Sample (PUMS) Census API. This API gives pseudo person-level data. We'll create generic functions to automatically summarize and plot certain returned data.

# Basic Example

To start off and gain familiarity with using the Census API, we did a basic query following the [Census examples](https://api.census.gov/data/2022/acs/acs1/pums/examples.html) and class notes. We saved the query as an R object named `census_info`. This helped us see how using R to grab data by API works and test our helper functions.

```{r}
key <- "ef57316550be8b6492df7ca01b32a193c83ed8fc"
example_URL_census <- "https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24&key=ef57316550be8b6492df7ca01b32a193c83ed8fc"
census_info <- httr::GET(example_URL_census)
```

# Data Processing

To be able to write a customizable function to query the Census API, we wrote a couple helper functions one named `get_tibble` to take what is returned by GET() and turn it into a tibble and tested it with our `census_info` R object that we created earlier and saved the tibble as an R object named `census_tibble`. The second helper function named `format_num_and_cat_vars` to make numeric variable columns numeric, time column datetime, and categorical columns levels.

```{r}
get_tibble <- function(data_info){
  
  parsed <- fromJSON(rawToChar(data_info$content))

  num_columns <- length(parsed[1,])
  
  census_data <- data.frame(parsed[-1,])
  names(census_data) <- parsed[1,]

  return(as_tibble(census_data))
}

#Testing our function
census_tibble <- get_tibble(census_info)
census_tibble
```

```{r}
format_num_and_cat_vars <- function(data_tibble, numer_vars, cat_vars){
  if (all(numer_vars %in% all_numer_vars)){
    data_tibble <- data_tibble %>%
      mutate(across(numer_vars, as.numeric)) 
  }
  if (all(cat_vars %in% all_cat_vars)) {
    data_tibble <- data_tibble %>%
      mutate(across(cat_vars,as.factor)) 
  } 
  return(data_tibble)
}
```

We created five vectors named `all_numer_vars`, `time_vars`, `all_cat_vars`, `all_geog`, `key_query` that had our variables that we would need for our future function for input validation.

```{r}
#constants needed in the code chunk below
all_numer_vars = c("AGEP", "GASP", "GRPIP", "JWAP", "JWDP", "JWMNP", "PWGTP")
time_vars = c("JWAP", "JWDP")
all_cat_vars = c("FER", "HHL", "HISPEED", "JWTRNS", "SCH", "SCHL", "SEX")
all_geog = c("All", "Region", "Division", "State")
key_query <- "&key=ef57316550be8b6492df7ca01b32a193c83ed8fc"
```

## Customizable function to query the API

The function named `query_census_api` has the following arguments: year, numer_vars, cat_vars, geog, and geog_values. It also uses the functions `get_tibble` and `format_num_and_cat_vars` created earlier to return our data request into a nice usable format.

-   **year**: this argument represents the "Year of survey" with the year 2022 as the default year and the input values must be between 2010 and 2022.

-   **numer_vars**: this argument represents the numeric variables to be returned with 'AGEP' and 'PWGTP' as defaults. The variable 'PWGTP' will always be returned. This input parameter has the following options for the user: AGEP, GASP, GRPIP, JWAP (time), JWDP (time), and JWMNP.

-   **cat_vars**: this argument represents the categorical variables to be returned with 'SEX' as the default value. This input parameter has the following options for the user: FER, HHL, HISPEED, JWTRNS, SCH, SCHL, and SEX.

-   **geog**: this argument represents the geography level to be returned with 'State' as the default value. This input parameter has the following options for the user: All, Region, Division, and State

```{r}
query_census_api <- function(year=2022, numer_vars=c("AGEP"), cat_vars=c("SEX"), geog="State", geog_values=c('12')){
  
  ######################INPUT VALIDATION######################
  #year
  if ((!year %in% 2010:2022)){
    stop("Year must be between 2010 and 2022.")
  }
  
  #numer_vars
  numer_vars <- union(numer_vars, "PWGTP")
  
  if(length(numer_vars) < 2) {
    stop("Not enough numerical variables specified. Options are AGEP, GASP, GRPIP, JWAP, JWDP, JWMNP, and PWGTP")
  } else if(length(union(all_numer_vars, numer_vars)) > length(all_numer_vars)){
    stop("numer_vars includes variables which are not in the allowed set, which is AGEP, GASP, GRPIP, JWAP, JWDP, JWMNP, and PWGTP")
  }
  
  #cat_vars
  if(length(cat_vars) < 1) {
    stop("Not enough categorical variables specified. Options are FER, HHL, HISPEED, JWTRNS, SCH, SCHL, and SEX")
  } else if(length(union(all_cat_vars, cat_vars)) > length(all_cat_vars)){
    stop("cat_vars includes variables which are not in the allowed set, which is FER, HHL, HISPEED, JWTRNS, SCH, SCHL, and SEX")
  }
  
  #geog
  if (!(geog %in% all_geog)){
    stop("invalid value for geog. Options are All, Region, Division, and State")
  }
  ######################INPUT VALIDATION######################

  #now to build the query URL
  vars_query <- paste0(c(numer_vars, cat_vars), collapse=",")
  
  geog_query <- character()
  
  if(geog != "All"){
    if (length(geog_values) == 0) {
      geog_query <- paste0("&for=", tolower(geog), ":*")
    } else {
      geog_query <- paste0("&for=", tolower(geog), ":", paste0(geog_values, collapse=","))
    }
  } 
  
  URL_census <- paste0("https://api.census.gov/data/", 
                      year, 
                      "/acs/acs1/pums?",
                      "get=",
                      vars_query,
                      geog_query,
                      "&SCHL=24",
                      key_query)
  
  data_info <- httr::GET(URL_census)
  data = get_tibble(data_info)
  clean_data = format_num_and_cat_vars(data, numer_vars, cat_vars)
  class(clean_data) <- c("census",class(clean_data))
  #return(data)
}

#data_tibble_test <- query_census_api(year=2021, numer_vars=c("AGEP", "GASP", "GRPIP", "JWAP", "JWDP", "JWMNP", "PWGTP"))
#data_tibble_test <- query_census_api(year=2021, numer_vars=c("AGEP"), cat_vars=c("HISPEED"), geog="State", geog_values=c("06", "24"))
#data_tibble_test <- query_census_api(year=2021, numer_vars=c("AGEP"), cat_vars=c("HISPEED"), geog="State")
#data_tibble_test <- query_census_api(year=2021, numer_vars=c("AGEP"), cat_vars=c("HISPEED"))
#data_tibble_test
```

To allow the user to specify multiple years of survey data we wrote the R function `query_with_years`.

```{r}
query_with_years <- function(years=c(2022), ...){
  
  combined_tibble = tibble()
  
  for(i in seq_along(years)){
    year_tibble <- query_census_api(year=years[i], ...) |>
                      mutate(year=years[i])
    
    combined_tibble <- bind_rows(combined_tibble, year_tibble)
  }
  
  return(combined_tibble)
}

#data_tibble <- query_with_years(numer_vars=c("JWAP"))
#data_tibble

```

## Writing a Generic Function for Summarizing

Now that we have our data, lets try to do something with it.  We created a function named `summary.census` that takes in three arguments: the tibble data set, the numeric variables (the default is all the numeric variables other than PWGTP) and any categorical variables that that you want to summarize. 

```{r}

summary.census <- function(data_tibble,numer_vars,cat_vars){

  #Find mean and sd of numeric variables
  #mean
  #sum(numeric_vector*weight_vector)/sum(weight_vector)
  #sd
  #sqrt(sum(numeric_vectorˆ2*weight_vector)/sum(weight_vector)-sample_meanˆ2)
  #summary(_your_census_tibble_)
  
  #creating a basic boxplot
  #ggplot(_your_census_tibble_or_modification_,
  #aes(x = get(cat_var), y = get(num_var), weight = PWGTP)) +
  #geom_boxplot()
}

```

## End example

This will be filled in later.

